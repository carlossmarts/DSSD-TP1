@page
@model WebApplication1.Pages.Administracion.AltaMedicamentoModel
@{
}
<div class="d-flex flex-column m-0 h-100 ">
    <main role="main" class=" ">
        <div class="container my-4">
            <form class="mx-4 mx-md-0" method="post">
                <div class="row">
                    <div class="col-12 col-md-6 mb-3">
                        <label for="codigo" class="form-label">Codigo Numerico</label>
                        <input type="text" class="form-control" id="codigo" placeholder="12345" asp-for="cod_medicamento" required>
                    </div>
                    <div class="col-12 col-md-6 mb-3">
                        <label for="nombre" class="form-label">Nombre comercial</label>
                        <input type="text" class="form-control" id="nombre" placeholder="Amoxol" asp-for="nombre" required>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 col-md-6 mb-3">
                        <label for="droga" class="form-label">Nombre farmacologico</label>
                        <input type="text" class="form-control" id="droga" placeholder="Amoxicilina" asp-for="droga" aria-describedby="drogades" required>
                        <div id="drogades" class="form-text">Nombre para describir qué droga es</div>
                    </div>
                    <div class="col-12 col-md-6 mb-3">
                        <label for="tipo" class="form-label">Tipo de medicamento</label>
                        <select id="tipo" class="form-select" asp-for="@Model.tipo" asp-items="@Model.TagOptions" required>
                        </select>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Guardar</button>
            </form>
        </div>
    </main>
</div>
<script>
    const altaProducto = (event) => {
        event.preventDefault();
        let cod_medicamento = document.getElementById("codigo").value;
        let nombre = document.getElementById("nombre").value;
        let droga = document.getElementById("droga").value;
        let tipo = document.getElementById("tipo").value;

        let request = {
            "id": 11111,
            "cod_medicamento": cod_medicamento,
            "nombre": nombre,
            "droga": droga,
            "tipo": tipo
        };
        console.log(request);
    }

    const FormVerificacionCodigo = () => {

        const [codigoMedicamento, setCodigoMedicamento] = useState("");
        const [codValido, setCodValido] = useState(false);
        const [existeCodigo, setExisteCodigo] = useState(false);
        const [mensaje, setMensaje] = useState();
        const [prioritario, setPrioritario] = useState(undefined);


        useEffect(() => {
            console.log("Prioritario: ", prioritario)
        }, [prioritario])


        const validarCodigo = () => {
            if (codigoMedicamento) {
                setExisteCodigo(true)
                let partes = codigoMedicamento.split("-")
                let valido = false //no uso el valor de codValido porque se actualiza de maner asíncrona

                valido = validarEstructura(partes)
                if (valido) {
                    valido = verPrioridad(partes[0].toUpperCase());
                }
                if (valido) {
                    valido = validarDigitoVerificador(partes[1], partes[2])
                }

            }
        }

        const validarEstructura = (partes) => {
            let valido = true
            if (partes.length === 3) {
                const regexNum = /^[0-9]+$/;
                const regexLetra = /^[A-Z]+$/
                setCodValido(true)
                setMensaje("codigo valido")
                if (!regexLetra.test(partes[0].toUpperCase())) {
                    setMensaje("El primer bloque deben ser al menos una letra de la A a la Z")
                    setCodValido(false)
                    valido = false
                }
                if (!regexNum.test(partes[1]) || partes[1].length !== 5) {
                    setMensaje("El segundo bloque deben ser 5 números del 1 al 9")
                    setCodValido(false)
                    valido = false
                }
                if (!regexNum.test(partes[2]) || partes[2].length !== 1) {
                    setMensaje("El tercer bloque deben ser un digito verificador")
                    setCodValido(false)
                    valido = false
                }

            } else {
                setMensaje("El codigo debe tener tener la estructura 'XX-NNNNN-Y")
                setCodValido(false)
                valido = false
            }
            return valido;
        }

        const verPrioridad = (str) => {
            let valido = true
            if (str[0] === 'P') {
                setPrioritario(true)
            } else if (str[0] === 'W') {
                setPrioritario(false)
            } else {
                setMensaje("la primer letra debe ser P o W  ")
                setCodValido(false)
                valido = false
                setPrioritario(undefined)
            }

            return valido
        }

        const validarDigitoVerificador = (numero, digito) => {
            let valido = true;
            console.log(`Numero: ${numero}, dígito verificador : ${digito}`)
            while (numero.length > 1) {
                numero = sumarDigitos(numero)
            }
            if (numero !== digito) {
                valido = false
                setCodValido(false)
                setMensaje("el digito verificador es incorrecto")
            }
            return valido;
        }

        const sumarDigitos = (strNum) => {
            let resultado = strNum.split('').map(Number).reduce((a, b) => a + b, 0);
            console.log(resultado);
            return "" + resultado;
        }
    }
</script>